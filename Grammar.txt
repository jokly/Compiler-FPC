// Program
program ::= program_header ';' block '.'

program_header ::= PROGRAM identifier ';'

block ::= ( const_decl | type_decl | var_decl | proc_func_decl )* compound_statement

// Const
const_decl ::= CONST ( const_statement )+

const_statement ::= identifier '=' expression ';'

// Type
type_decl ::= TYPE ( type_statement )+

type_statement ::= identifier '=' ( type | func_type | proc_type ) ';'

func_type ::= FUNCTION formal_parameter_list ':' type

proc_type ::= PROCEDURE formal_parameter_list

type ::= (simple_type | array_type | pointer_type | struct_type)

simple_type ::= identifier

array_type ::= ARRAY '[' integer '..' integer ']' OF type

pointer_type ::= '^' identifier

struct_type ::= RECORD ( var_decl_row ';' )+ END ';'

var_decl_row ::= field_list ':' type

field_list ::= identifier (',' identifier)*

// Var
var_decl ::= VAR ( var_decl_row )+

// Procedure and Function
proc_func_decl ::= (proc_decl | func_decl)*

proc_decl ::= PROCEDURE identifier formal_parameter_list ';' block ';'

func_decl ::= FUNCTION identifier formal_parameter_list ';' block ';'

formal_parameter_list ::= '(' var_decl_row ( ';' var_decl_row )* ')'

// Compound statement
compound_statement ::= BEGIN statements END

statements ::= statement (';' statement)*

statement ::= (if_stmnt | while_stmnt | repeat_stmnt | for_stmnt | assign_stmnt | func_call_stmnt)

if_stmnt ::= IF expression THEN compound_statement ';' ( if_stmnt )* ( else compound_statement ';')+

while_stmnt ::= WHILE expression DO compound_statement ';'

repeat_stmnt ::= REPEAT statements UNTIL expression ';'

for_stmnt ::= FOR assign ( TO | DOWNTO ) expression DO compound_statement ';'

assign ::= identifier ':=' expression

assign_stmnt ::= assign ';'

func_call_stmnt ::= identifier args_list ( '()' | arr_index ) ';'

args_list ::= '(' expression (',' expression) ')'

expression ::= ( simple_expr | simple_expr < simple_expr | simple_expr <= simple_expr | simple_expr > simple_expr | simple_expr >= simple_expr |
    simple_expr = simple_expr | simple_expr <> simple_expr )

simple_expr ::=  ( term | term + term | term - term | term OR term )

term ::= ( factor | factor * factor | factor / factor | factor DIV factor | factor MOD factor | factor AND factor | factor SHL factor | factor SHR factor |
    factor << factor | factor >> factor )

factor ::= function_call | unsigned_constant | NOT factor | '-' factor | '+' factor | '@' factor

unsigned_constant ::= unsigned_number | chr | stirng | identifier

unsigned_number := unsigned_int | unsigned_real

unsigned_int ::= (0-9)+

unsigned_real ::= unsigned_int ( '.' unsigned_int | 'e' unsigned_int )

chr ::= ( ''' CHAR ''' | '#' unsigned_int )

string ::= ''' ( CHAR )* '''

identifier ::= ID
